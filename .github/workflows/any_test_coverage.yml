name: Test and Coverage

on:
  push:
    branches:
      - '*'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest

    services:
      mysql:
        # image: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}-mysql:latest
        # image: ghcr.io/${{ github.repository_owner }}/digital_ocean_mysql_template-mysql:latest
        image: ghcr.io/visualex/visualex/digital_ocean_mysql_template-mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: default_database
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.test_build_token }}

    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USERNAME: test_user
      MYSQL_PASSWORD: test_password
      MYSQL_DATABASE: default_database

    steps:
    - name: checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Login
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.test_build_token }}

    - name: check env vars
      run: env

    - name: build php container
      run: docker build -t php-container -f Dockerfile .

    # if you need to call composer install, uncomment these lines
    # - name: Set up PHP Container
    #   run: |
    #     docker run --rm  -v ${{ github.workspace }}:/app php-container composer install

    - name: run transition
      run: |
        env
        docker run --rm --network host php-container env
        docker run --rm --network host php-container bin/cake transition

    - name: run phpunit tests
      run: |
        docker run --rm --network host php-container vendor/bin/phpunit --stop-on-failure

    # run tests and upload coverage:
    # note how to mount files into the container with -v flag
    # - name: run phpunit tests with coverage
    #   run: |
    #     docker run --rm --network host -v ${{ github.workspace }}:/app php-container phpunit --coverage-clover build/logs/clover.xml

    # - name: Upload Coverage to Codecov
    #   uses: codecov/codecov-action@v2
    #   with:
    #     file: build/logs/clover.xml
    #     token: ${{ secrets.CODECOV_TOKEN }}

